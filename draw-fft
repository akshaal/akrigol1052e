#!/usr/bin/env python
# Copyright (c) 2017, Akshaal blahblahblah, GNU GPL blahblahblah

import akrigol
import scipy.signal
import numpy as np
import matplotlib.pyplot as plt
import peakdetect
import matplotlib.ticker as tkr

from pylab import rcParams
from scipy.signal import butter, filtfilt
from matplotlib import gridspec

# Read previously serialized 'scope' object
scp = akrigol.deserialize("scope")
ch = scp.active_channels[0]

points = ch.raw_points
sample_rate = ch.sample_rate

print("Sample rate: " + akrigol.as_hz(sample_rate))

fig_bg_color = 'black'
grid_color = 'white'

Y = np.fft.rfft(points)
N = len(Y)
Y = np.abs(Y)
Y = 2 * Y / N

Y[0] = min(Y)

UY = Y
Y = 20 * np.log10(Y)

X = np.linspace(0, sample_rate / 2.0, N, endpoint = True)

def draw(i, lookahead, delta, neg = False, all = False):
    print("------------")

    peaks, peaks2 = peakdetect.peakdetect(np.array(UY), lookahead = lookahead, delta = delta)
    if neg:
        peaks.extend(peaks2)

    MIN = 0
    MAX = len(Y)

    plot = fig.add_subplot(gs[i])

    mfound = False
    maxfound = False
    usedp = {}
    for peak in peaks:
        peak = peak[0]

        print("Peak at " + akrigol.as_hz(X[peak]) + " of " + akrigol.as_wtf((Y[peak])))
        plabel = akrigol.as_hz(X[peak])
        if plabel not in usedp:
            usedp[plabel] = 1
            plot.text(X[peak], Y[peak], plabel, color = "white")

        if mfound:
            if MIN > peak:
                MIN = peak
        else:
            mfound = True
            MIN = peak

        if maxfound:
            if MAX < peak:
                MAX = peak
        else:
            maxfound = True
            MAX = peak

    if len(peaks) == 1:
        MIN = MIN - 200
        MAX = MAX + 200
    else:
        ddd = (MAX-MIN) / 10
        if ddd < 200: ddd = 200
        MIN = MIN - ddd
        MAX = MAX + ddd

    if MIN < 0: MIN = 0
    if MAX > len(Y): MAX = len(Y)

    if all:
        MIN = 0
        MAX = -1

    plot.xaxis.set_major_formatter(tkr.FuncFormatter(lambda x, p: akrigol.as_hz(x)))

    plot.set_ylabel('Amplitude [dB]')

    plot.tick_params(axis='x', colors='white')
    plot.tick_params(axis='y', colors='white')
    plot.title.set_color('white')

    plot.yaxis.label.set_color('white')
    plot.xaxis.label.set_color('white')

    plot.grid(color = grid_color)
    plot.set_axis_bgcolor(fig_bg_color)

    plot.margins(y=0, x=0)
    plot.plot(X[MIN:MAX], Y[MIN:MAX], color = "yellow")

    print(MIN, MAX)

fig = plt.figure("abc", tight_layout = True)
fig.set_size_inches(60, 30)

gs = gridspec.GridSpec(2, 2)
draw(0, 2, 0.4, neg = True)
draw(1, 20, 0.1, neg = False)
draw(2, 20, 0.05)
draw(3, 20, 0.1, neg = True, all = True)

fffname = "out/img-fft.png"
print("Writing: " + fffname)
fig.savefig(fffname, dpi = 150, frameon = False, facecolor = "#101010", edgecolor = "white")

suff = "-" + akrigol.make_timestamp(scp.retrieval_date)
fffname2 = "out/img-fft" + suff + ".png"
akrigol.call(["cp", fffname, fffname2])
print("Writing: " + fffname2)

fffname2 = "out/img-by-d" + suff + "-fft.png"
akrigol.call(["cp", fffname, fffname2])
print("Writing: " + fffname2)
